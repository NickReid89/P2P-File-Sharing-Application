package Peer2Peer;


/**
* Peer2Peer/P2PPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from P2P.idl
* Monday, April 11, 2016 1:26:09 AM ADT
*/

public abstract class P2PPOA extends org.omg.PortableServer.Servant
 implements Peer2Peer.P2POperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("registerIP", new java.lang.Integer (0));
    _methods.put ("registerFile", new java.lang.Integer (1));
    _methods.put ("removeFile", new java.lang.Integer (2));
    _methods.put ("requestFile", new java.lang.Integer (3));
    _methods.put ("requestFileList", new java.lang.Integer (4));
    _methods.put ("deleteUser", new java.lang.Integer (5));
    _methods.put ("sendFile", new java.lang.Integer (6));
    _methods.put ("filePath", new java.lang.Integer (7));
    _methods.put ("shutdown", new java.lang.Integer (8));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // Peer2Peer/P2P/registerIP
       {
         String name = in.read_string ();
         String ip = in.read_string ();
         boolean $result = false;
         $result = this.registerIP (name, ip);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 1:  // Peer2Peer/P2P/registerFile
       {
         String fileName = in.read_string ();
         String fileLocation = in.read_string ();
         String user = in.read_string ();
         boolean $result = false;
         $result = this.registerFile (fileName, fileLocation, user);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 2:  // Peer2Peer/P2P/removeFile
       {
         String fileName = in.read_string ();
         String userID = in.read_string ();
         boolean $result = false;
         $result = this.removeFile (fileName, userID);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 3:  // Peer2Peer/P2P/requestFile
       {
         String fileName = in.read_string ();
         String $result = null;
         $result = this.requestFile (fileName);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 4:  // Peer2Peer/P2P/requestFileList
       {
         String $result = null;
         $result = this.requestFileList ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 5:  // Peer2Peer/P2P/deleteUser
       {
         String userName = in.read_string ();
         this.deleteUser (userName);
         out = $rh.createReply();
         break;
       }

       case 6:  // Peer2Peer/P2P/sendFile
       {
         String fileName = in.read_string ();
         String $result = null;
         $result = this.sendFile (fileName);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 7:  // Peer2Peer/P2P/filePath
       {
         String serverName = in.read_string ();
         String fileName = in.read_string ();
         String $result = null;
         $result = this.filePath (serverName, fileName);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 8:  // Peer2Peer/P2P/shutdown
       {
         this.shutdown ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:Peer2Peer/P2P:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public P2P _this() 
  {
    return P2PHelper.narrow(
    super._this_object());
  }

  public P2P _this(org.omg.CORBA.ORB orb) 
  {
    return P2PHelper.narrow(
    super._this_object(orb));
  }


} // class P2PPOA
